{"version":3,"sources":["images/ss3.png","images/ss2.png","images/ss4.png","images/main.jpg","serviceWorker.js","Components/Header.js","config/config.js","Components/Main.js","Components/Leaderboard.js","Components/App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Header","props","modalRef","React","useRef","Fragment","className","to","href","onClick","e","current","style","display","target","color","alt","src","find1","find2","find3","ref","fire","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","MainImage","useState","seconds","changeSeconds","minutes","changeMinutes","minny","changeMinny","waldo","changeWaldo","carry","changeCarry","timer","changeTimer","panelRef","boxRef","clickRef","nameRef","descRef","checkWinner","useCallback","check","found","id","collection","doc","get","then","snapshot","mainTarget","data","xStartSpot","x","xFinishSpot","yStartSpot","y","yFinishSpot","ySpotCheck","posY","xSpotCheck","posX","borderColor","setTimeout","console","log","catch","err","alert","useEffect","interval","setInterval","clearInterval","main","rect","getBoundingClientRect","clientX","left","clientY","top","realXValue","Math","round","clientWidth","realYValue","pageX","pageY","type","required","preventDefault","totalSeconds","String","length","totalMinutes","totalTime","name","value","description","add","time","cred","Leaderboard","scores","changeScores","loader","changeLoader","onSnapshot","changes","docChanges","map","score","key","App","path","exact","Main","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.a6b58d33.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ss3.fe5cf257.png\";","module.exports = __webpack_public_path__ + \"static/media/ss2.c8f448a0.png\";","module.exports = __webpack_public_path__ + \"static/media/ss4.2656e386.png\";","module.exports = __webpack_public_path__ + \"static/media/main.d8de0a0b.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport find1 from '../images/ss3.png';\r\nimport find2 from '../images/ss2.png';\r\nimport find3 from '../images/ss4.png';\r\n\r\nfunction Header(props){\r\n    let modalRef = React.useRef();\r\n\r\n    let makeVisible = (e) => {\r\n        if(modalRef.current.style.display === 'block'){\r\n            modalRef.current.style.display = 'none';\r\n            e.target.style.color = \"white\";\r\n        } else {\r\n            modalRef.current.style.display = 'block';\r\n            e.target.style.color = \"dodgerblue\";\r\n        }\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <nav className=\"pink lighten-2\">\r\n                <div className=\"navwrapper\">\r\n                    <Link to=\"/\">\r\n                        <a href=\"/\" className=\"brand-logo center teal-text text-darken-4\">Where's Waldo!?</a>\r\n                    </Link>\r\n                </div>\r\n                <div className=\"right\">\r\n                    <button\r\n                        className=\"btn waves-effect light-blue darken-3\"\r\n                        onClick={makeVisible}>\r\n                            Instructions\r\n                    </button>\r\n                    <button\r\n                        className=\"btn waves-effect pulse light-blue darken-3 btn2\">\r\n                            <Link to=\"/leaderboards\">Leaderboard</Link>\r\n                    </button>\r\n                </div>\r\n                <div className=\"left people\">\r\n                    <span className=\"person\">\r\n                        <span>Minny</span>\r\n                        <span><img alt=\"find1\" className=\"responsive-image find\" src={find1} /></span>\r\n                    </span>\r\n                    <span className=\"person\">\r\n                        <span>Waldo</span>\r\n                        <span><img alt=\"find2\" className=\"responsive-image find\" src={find2} /></span>\r\n                    </span>\r\n                    <span className=\"person\">\r\n                        <span>Carry</span>\r\n                        <span><img alt=\"find3\" className=\"responsive-image find\" src={find3} /></span>\r\n                    </span>\r\n                </div>\r\n            </nav>\r\n            <div ref={modalRef} className=\"container modal indigo white-text\">\r\n                <h3 className='center'>Intructions</h3>\r\n                <div className=\"center\">Your Task Is To Find:</div>\r\n                <div className=\"center\">\r\n                    <span>Minny</span>\r\n                    <img src={find1} alt=\"minny\" className=\"inst-pic\" />\r\n                </div>\r\n                <div className=\"center\">\r\n                    <span>Waldo</span>\r\n                    <img src={find2} alt=\"waldo\" className=\"inst-pic\"/>\r\n                </div>\r\n                <div className=\"center\">\r\n                    <span>Carry</span>\r\n                    <img src={find3} alt=\"carry\" className=\"inst-pic\"/>\r\n                </div>\r\n                <div className=\"center\">GOODLUCK!</div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Header;","import * as firebase from \"firebase/app\";\r\nimport \"firebase/analytics\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCJNwu8QCxnabaPs_HStPFtz6YNJRv0nwQ\",\r\n    authDomain: \"baas-waldo.firebaseapp.com\",\r\n    databaseURL: \"https://baas-waldo.firebaseio.com\",\r\n    projectId: \"baas-waldo\",\r\n    storageBucket: \"baas-waldo.appspot.com\",\r\n    messagingSenderId: \"614705905258\",\r\n    appId: \"1:614705905258:web:931a249f66acebd0c79413\",\r\n    measurementId: \"G-MQ2YVCD2F9\"\r\n};\r\n\r\nconst fire = firebase.initializeApp(firebaseConfig);\r\n\r\nexport default fire;\r\n","import React from 'react';\r\nimport main from '../images/main.jpg'\r\nimport firebase from '../config/config';\r\nconst db = firebase.firestore();\r\n\r\nfunction MainImage(props){\r\n\r\n    // states\r\n    let [ seconds, changeSeconds ] = React.useState(0);\r\n    let [ minutes, changeMinutes ] = React.useState(0);\r\n    let [minny, changeMinny] = React.useState(false);\r\n    let [waldo, changeWaldo] = React.useState(false);\r\n    let [carry, changeCarry] = React.useState(false);\r\n    let [timer, changeTimer] = React.useState(true);\r\n\r\n    // references to elements since too many states\r\n    let panelRef = React.useRef();\r\n    let boxRef = React.useRef();\r\n    let clickRef = React.useRef();\r\n    let modalRef = React.useRef();\r\n    let nameRef = React.useRef();\r\n    let descRef = React.useRef();\r\n\r\n    // callback function to check the winner\r\n    let checkWinner = React.useCallback(() => {\r\n            if(minny && waldo && carry){\r\n                modalRef.current.style.display = \"block\";\r\n                changeTimer(false);\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }, [modalRef, minny, waldo, carry]\r\n    )\r\n\r\n    React.useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            changeSeconds(seconds => seconds + 1);\r\n            let status = checkWinner();\r\n            if (status){\r\n                console.log('won')\r\n            }\r\n            if(seconds === 60){\r\n                changeMinutes(minutes => minutes + 1);\r\n                changeSeconds(0);\r\n            }\r\n        }, 1000)\r\n        if (timer === false){\r\n            clearInterval(interval);\r\n        }\r\n        return () => clearInterval(interval);\r\n    }, [seconds, timer, checkWinner, ])\r\n\r\n\r\n    // function to move the panel to the clicked spot\r\n    let clickHandler = (e) => {\r\n\r\n        // if player has won then quit\r\n        if (checkWinner()){\r\n            return;\r\n        }\r\n\r\n        let rect = e.target.getBoundingClientRect();\r\n        let x = e.clientX - rect.left; //x position within the element.\r\n        let y = e.clientY - rect.top;  //y position within the element.\r\n\r\n        // 1263 is the total width of the image\r\n        // 811 is the total height of the image\r\n        let realXValue = Math.round(x * 1263 / e.target.clientWidth);\r\n        let realYValue = Math.round(y * 811 / e.target.clientWidth);\r\n\r\n        //console.log(`X is ${realXValue} & Y is ${realYValue}`);\r\n\r\n        // storing the coordinates in the reference\r\n        clickRef.current = {\r\n            x: realXValue,\r\n            y: realYValue,\r\n        }\r\n\r\n        // for the user to select the character they found\r\n        panelRef.current.style.left = `${e.pageX - 50}px`;\r\n        panelRef.current.style.top = `${e.pageY - 50}px`;\r\n\r\n        // if its visible then hide, else show\r\n        if (panelRef.current.style.display === 'flex'){\r\n            panelRef.current.style.display = 'none';\r\n        } else {\r\n            panelRef.current.style.display = 'flex';\r\n        }\r\n    }\r\n\r\n    function check(e){\r\n        let found = e.target.id;\r\n        // get that value from the database\r\n        db.collection('find').doc(found).get().then((snapshot) => {\r\n            let mainTarget = snapshot.data();\r\n\r\n            // x(horizontal) position for calculations\r\n            let xStartSpot = clickRef.current.x - 25;\r\n            let xFinishSpot = clickRef.current.x + 30;\r\n\r\n            // y(vertical) position for calculations\r\n            let yStartSpot = clickRef.current.y - 30;\r\n            let yFinishSpot = clickRef.current.y + 50;\r\n\r\n            // console.log(`horizontal start ${xStartSpot}, end ${xFinishSpot}`)\r\n            // console.log(`vertical start ${yStartSpot}, end ${yFinishSpot}`)\r\n\r\n            // checking if the target is within the user selected box\r\n            let ySpotCheck = mainTarget.posY >= yStartSpot && mainTarget.posY <= yFinishSpot;\r\n            let xSpotCheck = mainTarget.posX >= xStartSpot && mainTarget.posX <= xFinishSpot;\r\n\r\n            if (ySpotCheck && xSpotCheck){\r\n                //panelRef.current.classList.add('animate-green');\r\n                //panelRef.current.style.display = 'none';\r\n                panelRef.current.style.borderColor = 'green';\r\n                setTimeout(() => {\r\n                    panelRef.current.style.borderColor = '#00897b';\r\n                    panelRef.current.style.display = 'none';\r\n                }, 500)\r\n                console.log(`found ${found}`)\r\n                if(found === 'minny'){\r\n                    // minny has been found\r\n                    changeMinny(true);\r\n                }\r\n                else if(found === 'waldo'){\r\n                    // waldo has been found\r\n                    changeWaldo(true);\r\n                }\r\n                else{\r\n                    // carry has been found\r\n                    changeCarry(true)\r\n                }\r\n            } else {\r\n                panelRef.current.style.borderColor = 'red';\r\n\r\n                setTimeout(() => {\r\n                    panelRef.current.style.borderColor = '#00897b';\r\n                    panelRef.current.style.display = 'none';\r\n                }, 500)\r\n            }\r\n        }).catch(err => {\r\n            alert(err);\r\n        })\r\n\r\n        // console.log(e.target.id);\r\n        // console.log(clickRef.current.x, clickRef.current.y);\r\n    }\r\n\r\n    const saveDB = (e) => {\r\n        e.preventDefault();\r\n        let totalSeconds = String(seconds).length === 2 ? String(seconds) : `0${seconds}`;\r\n        let totalMinutes = String(minutes).length === 2 ? String(minutes) : `0${minutes}`;\r\n        let totalTime = `${totalMinutes}:${totalSeconds}`\r\n\r\n        let name = nameRef.current.value;\r\n        let description = descRef.current.value;\r\n    \r\n        db.collection('winners').add({\r\n            name: name,\r\n            description: description,\r\n            time : totalTime,\r\n        }).then(cred => {\r\n            modalRef.current.style.display = 'none';\r\n            alert('Congratulations You Have Been Added To The LeaderBoard')\r\n        }).catch(() => {\r\n            alert(\"Sorry Something Went Wrong\");\r\n        })\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <img alt=\"mainimage\" src={main} className=\"main-img\" onClick={clickHandler}/>\r\n            <div ref={panelRef} className=\"find-panel\">\r\n                <div className=\"box\" ref={boxRef}></div>\r\n                {!minny ? <button className=\"btn\" id=\"minny\" onClick={check}>Minny</button> : null}\r\n                {!waldo ? <button className=\"btn\" id=\"waldo\" onClick={check}>Waldo</button> : null}\r\n                {!carry ? <button className=\"btn\" id=\"carry\" onClick={check}>Carry</button> : null}\r\n            </div>\r\n            <div ref={modalRef} className={`container modal `}>\r\n                <div className=\"card-panel\">\r\n                    <div className=\"card-content center\">Congratulations You Won!</div>\r\n                    <form className=\"form-control\">\r\n                        <div className=\"input-field\">\r\n                            <span className=\"label\">Enter Your Name</span>\r\n                            <input ref={nameRef} type=\"text\" required/>\r\n                            <br />\r\n                            <span className=\"label\">Your Words</span>\r\n                            <input ref={descRef} type=\"text\" required/>\r\n                            <button className=\"btn right light-blue darken-3\" onClick={saveDB}>Submit</button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default MainImage;","import React, { useEffect, useState } from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport firebase from '../config/config';\r\n\r\nexport default function Leaderboard(){\r\n    let [scores, changeScores] = useState([]);\r\n    let [loader, changeLoader] = useState(true);\r\n\r\n    useEffect(() => {\r\n        let db = firebase.firestore();\r\n        db.collection('winners').onSnapshot(snapshot => {\r\n            let changes = snapshot.docChanges();\r\n            changeScores(changes);\r\n            changeLoader(false);\r\n        })\r\n    }, [])\r\n\r\n    return(\r\n        <div>\r\n            <h3 className=\"center\">LeaderBoard</h3>\r\n            {loader ? <div className=\"loader center\"></div> : null }\r\n            <div className=\"row\">\r\n                {scores.map(score => {\r\n                    return(\r\n                        <div className=\"col s12 m6 l4 animate\" key={score.doc.id}>\r\n                            <div className=\"card\">\r\n                                <div \r\n                                    className=\"indigo darken-3 white-text center card-title\"\r\n                                    >{score.doc.data().name}\r\n                                </div>\r\n                                <div\r\n                                    className=\"card-content center indigo white-text\">\r\n                                    <span>Words From The Player:</span>\r\n                                    <br />\r\n                                    {score.doc.data().description}\r\n                                </div>\r\n                                <div className=\"center\">\r\n                                    Completed In   {score.doc.data().time} minutes!\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n            <div className=\"center\">\r\n                <Link to=\"/\">\r\n                    <button className=\"btn white-text\">\r\n                        Go Back To Main Game Page\r\n                    </button>\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}","// main\nimport React from 'react';\n// components\nimport Header from './Header';\nimport Main from './Main';\nimport Leaderboard from './Leaderboard';\n// firebase\n//import firebase from '../config/config'\n//const db = firebase.firestore();\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\n\n\nfunction App(){\n\n  return (\n    <Router>\n        <Header />\n        <Route path=\"/\" exact >\n          <Main />\n        </Route>\n        <Route path=\"/leaderboards\">\n          <Leaderboard />\n        </Route>\n    </Router>\n  )\n}\n\nexport default App;\n","// main\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\n// components\nimport App from './Components/App';\n\n// styles\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}